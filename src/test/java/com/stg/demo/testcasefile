package com.henrysgrocery.solution.service;

import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;

import com.henrysgrocery.solution.entity.Product;

@ExtendWith(MockitoExtension.class)
class ProductServiceTest {

	@InjectMocks
	ProductService productService;

	private Product product;

	@BeforeEach
	public void setup() {

		product = new Product();
		product.setProductname("soup");
		product.setUnit("tin");
		product.setCost(0.65);

	}

	@Test
	void testCalculateBreadPrice() throws Exception {
		/*
		 * Price a basket containing: 3 tins of soup and 2 loaves of bread, bought
		 * today, Expected total cost = 3.15;
		 */

		product = new Product();
		product.setProductname("soup");
		product.setUnit("tin");
		product.setCost(0.65);

		// double cost = (Double.parseDouble(String.format("%.2f", product.getCost() *
		// 3)) + (2 * 0.80)) - 0.40;

		double cost = productService.getTotalCost(3, 2);
		assertEquals(3.15, cost);

	}

	// Price a basket containing: 6 apples and a bottle of milk, bought today,
	// Expected total cost = 1.90;
	@Test
	void testCalculateApplePriceWithMilk() throws Exception {
		product = new Product();
		product.setProductname("apple");
		product.setUnit("single");
		product.setCost(0.10);

		double cost = productService.getTotalCostforAppleAndMilk(6, 1);
		assertEquals(1.90, cost);

	}

	@Test
	void testCalculateApplePriceWithMilkWithDiscount() throws Exception {
		product = new Product();
		product.setProductname("apple");
		product.setUnit("single");
		product.setCost(0.10);

		double cost = productService.getTotalCostforAppleAndMilkWithDiscount(6, 1);
		assertEquals(1.84, cost);

	}

	@Test
	void testCalculateApplePriceAndBreadWithMilkWithDiscount() throws Exception {
		product = new Product();
		product.setProductname("apple");
		product.setUnit("single");
		product.setCost(0.10);

		double cost = productService.getTotalCostforAppleAndMilkAndSoupWithDiscount(3, 2, 1);
		assertEquals(1.97, cost);

	}

}
